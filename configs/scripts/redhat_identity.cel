// Red Hat Identity Transformation
//
// Transforms JWT claims into Red Hat identity format (x-rh-identity structure)
// Supports:
//   - Service Account tokens (preferred_username starts with "service-account-")
//   - Console API tokens (scope contains "api.console")
//
// Based on: https://github.com/RedHatInsights/insights-3scale

isServiceAccountToken(subject.claims) ? {
  // Service Account Token Branch
  "org_id": "rh-org-id" in subject.claims ? subject.claims["rh-org-id"] :
            (has(subject.claims.organization) ? subject.claims.organization.id : ""),
  "type": "ServiceAccount",
  "service_account": {
    "username": has(subject.claims.preferred_username) ? subject.claims.preferred_username : "",
    "client_id": has(subject.claims.client_id) ? subject.claims.client_id :
                 (has(subject.claims.clientId) ? subject.claims.clientId : ""),
    "user_id": has(subject.claims.sub) ? subject.claims.sub : "",
    "scope": has(subject.claims.scope) ? subject.claims.scope : ""
  },
  "internal": {
    "org_id": "rh-org-id" in subject.claims ? subject.claims["rh-org-id"] :
              (has(subject.claims.organization) ? subject.claims.organization.id : ""),
    "cross_access": false
  }
} : (
  isConsoleApiToken(subject.claims) ? {
    // Console API Token Branch (scope contains "api.console")
    "account_number": has(subject.claims.organization) && has(subject.claims.organization.account_number) ?
                      subject.claims.organization.account_number : "",
    "org_id": has(subject.claims.organization) && has(subject.claims.organization.id) ?
              subject.claims.organization.id : "",
    "type": "User",
    "user": {
      "username": has(subject.claims.preferred_username) ? subject.claims.preferred_username : "",
      "email": has(subject.claims.email) ? subject.claims.email : "",
      "first_name": has(subject.claims.given_name) ? subject.claims.given_name : "",
      "last_name": has(subject.claims.family_name) ? subject.claims.family_name : "",
      "is_active": true,
      "is_org_admin": hasRole(subject.claims, "admin:org:all"),
      "is_internal": has(subject.claims.is_internal) ? subject.claims.is_internal : hasRole(subject.claims, "redhat:employees"),
      "locale": has(subject.claims.locale) ? subject.claims.locale : "",
      "user_id": has(subject.claims.user_id) ? safeToString(subject.claims.user_id) : ""
    },
    "internal": {
      "org_id": has(subject.claims.organization) && has(subject.claims.organization.id) ?
                subject.claims.organization.id : "",
      "cross_access": false
    }
  } : {
    // Default: return empty/error - unsupported token type
    // This ensures we only handle the two specific token types
    "error": "unsupported_token_type"
  }
)
