# parsec Configuration - Minimal Example
#
# This is a minimal working configuration using stub implementations
# for testing and development. For production use, see parsec-production.yaml

server:
  grpc_port: 9090
  http_port: 8080

# Trust domain for this parsec instance
# Used as the audience (aud) claim in all issued tokens
trust_domain: "parsec.example.com"

# Exchange server configuration
exchange_server:
  # Claims filter (determines which request_context claims actors can provide)
  claims_filter:
    type: stub  # Allow all claims (passthrough)

# Trust store configuration
trust_store:
  type: stub_store
  validators:
    - name: redhat-sso
      type: jwt_validator
      issuer: "https://sso.redhat.com/auth/realms/redhat-external"
      jwks_url: "https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/certs"
      trust_domain: "https://sso.redhat.com/auth/realms/redhat-external"
      refresh_interval: "15m"

# Data sources for token enrichment (none configured by default)
data_sources: []

# Claim mappers for building token contexts
claim_mappers:
  # Transaction context mappers build the "tctx" claim
  transaction_context:
    - type: cel
      name: redhat-identity-mapper
      script_file: ./configs/scripts/redhat_identity.cel

  # Request context mappers build the "req_ctx" claim
  request_context:
    - type: request_attributes  # Include request path, method, etc.

# Token issuers
issuers:
  - token_type: "urn:ietf:params:oauth:token-type:txn_token"
    type: stub
    issuer_url: "https://parsec.example.com"
    ttl: 5m
  - token_type: "urn:redhat:params:oauth:token-type:rh-identity"
    type: rh_identity

# Authorization server configuration (ext_authz)
authz_server:
  token_types:
    - type: "urn:ietf:params:oauth:token-type:txn_token"
      header_name: "Transaction-Token"
    - type: "urn:redhat:params:oauth:token-type:rh-identity"
      header_name: "x-rh-identity"
